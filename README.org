#+TITLE: Emacs config
#+OPTIONS: ^:nil

Go IDE

[[file:screenshots/go-ide.png]]

Orgmode

[[file:screenshots/orgmode.png]]

* Table Of Content                                                      :TOC_3:
- [[#intro][Intro]]
- [[#安装][安装]]
  - [[#emacs-29][Emacs 29]]
  - [[#配置安装][配置安装]]
  - [[#开发环境][开发环境]]
    - [[#go][Go]]
    - [[#python][Python]]
    - [[#web][Web]]
- [[#目录结构][目录结构]]
- [[#常用快捷键cheat-sheet][常用快捷键（cheat sheet）]]
  - [[#leader-key-规范][leader key 规范]]
  - [[#文本][文本]]
  - [[#窗口][窗口]]
  - [[#目录][目录]]
  - [[#项目管理projectel][项目管理（project.el）]]
  - [[#coding][Coding]]
  - [[#git][Git]]
  - [[#org][Org]]
  - [[#rss-feed][RSS feed]]
- [[#packages][packages]]
  - [[#当前使用的][当前使用的]]
  - [[#以前用过的][以前用过的]]
- [[#faq][FAQ]]
  - [[#projectile-配置样例][projectile 配置样例]]
  - [[#emacs-启动速度太慢怎么办][Emacs 启动速度太慢怎么办？]]
  - [[#org-_--不被转义成下标和上标][Org =_= =^= 不被转义成下标和上标？]]
  - [[#org-92-后继续使用-s-tab-快捷插入][Org 9.2 后继续使用 =<s [Tab]= 快捷插入？]]
  - [[#org-todo-如何区分优先级][Org TODO 如何区分优先级？]]
  - [[#org-控制标题展开][Org 控制标题展开？]]
  - [[#org-文档如何展示目录][Org 文档如何展示目录？]]
  - [[#tab-和空格转换fn2][tab 和空格转换？[fn:2]]]
  - [[#为什么选择-lsp][为什么选择 LSP？]]
  - [[#项目管理][项目管理？]]
  - [[#写-go-代码时如何禁用注释中自动补全][写 Go 代码时如何禁用注释中自动补全？]]
  - [[#英文-ubuntu-下输入法无法切换中文][英文 Ubuntu 下输入法无法切换中文？]]
- [[#其他资料][其他资料]]
- [[#footnotes][Footnotes]]

* Intro

基于老的配置文件：https://gitlab.com/JerryZhang2012/emacs.d

10 年+ Emacs 用户，作为唯一编辑器，做过 C++、Python、Web（Javascript/React）、Go 等开发。

本配置适用于 *Emacs 29.x* 版本，MacOS GUI（Linux 大概率没问题）。

Github =main= 为稳定版本， =unstable= 是实验性版本。

*推荐阅读* [[https://www2.lib.uchicago.edu/keith/emacs/#orgc5a18efe][Use GNU Emacs: The Plain Text Computing Environment Emacs]] 堪称百科全书，看完之后不需要看其他文档了。

* 安装

** Emacs 29

*MacOS*

使用 [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]] 的版本：

#+begin_src sh
  brew reinstall gcc libgccjit
  brew tap d12frosted/emacs-plus
  brew install emacs-plus@29 --with-cacodemon-icon
  ln -s /usr/local/opt/emacs-plus@29/Emacs.app /Applications
#+end_src

卸载 =brew uninstall emacs-plus@29= 。

** 配置安装

#+begin_src sh
  git clone https://github.com/zhangjie2012/emacs.d.git ~/.emacs.d
#+end_src

打开 Emacs 时自动安装依赖包。我使用[[https://mirrors.ustc.edu.cn/help/elpa.html][中科大的源]]（清华源更新经常出问题）。或者官方源 + 代理：


#+begin_src elisp
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ))

  (setq url-proxy-services
        '(("no_proxy" . "^\\(localhost\\|10.*\\)")
          ("http" . "127.0.0.1:1087")
          ("https" . "127.0.0.1:1087")))
#+end_src

或者 ~http_proxy=http://127.0.0.1:7890 emacs~ 。

*如果遇到安装问题执行 =M-x package-refresh-content= 重启 Emacs。*

二进制：

- 搜索使用 [[https://github.com/BurntSushi/ripgrep][ripgrep]]  =brew install ripgrep=
- 编码，更多见下方 IDE：
  - 语法检测 flycheck [[https://www.flycheck.org/en/latest/languages.html#flycheck-languages][Supported languages]]
  - 统一使用 lsp，需要安装对应语言的 [[https://emacs-lsp.github.io/lsp-mode/page/languages/][Languages]]

图标：

=doom-mode-line 4.0.0= 之后不再支持 =all-the-icons= 由 =nerd-icons= 代替：打开 [[https://www.nerdfonts.com/#home][nerdfont]] ，下载 =Symbols Nerd Font= 即可。

** 开发环境

基于 [[https://langserver.org/][LSP]]，客户端使用 [[https://github.com/joaotavora/eglot][eglot]]。

<2023-02-10 Fri> 从 lsp-mode 换到了 eglot。原因：

- 从需求上：对我来说，必须的功能有 4 个，其他功能也基本没用过：
  1. 跳转到定义、反跳转 =M-.= =M-,=
  2. 查找所有引
  3. 查找所有 interface 实现
- 从复杂度上：eglot 配置简单（基本上没啥可配置的），lsp-mode 配置复杂（大项目会很慢）
- 从未来发展上：Emacs 29 之后，eglot 会作为内置组件

*** Go

按照 [[https://golang.org/doc/install][官方说明]] 安装 Go，LSP server 用的是 [[https://github.com/golang/tools/tree/master/gopls][gopls]]。

#+begin_src sh
  GO111MODULE=on go install golang.org/x/tools/gopls@latest
#+end_src

lint 工具：

#+begin_src sh1
  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.50.1
#+end_src

配置文件在：https://github.com/zhangjie2012/dotfiles/blob/master/_golangci.yaml

另外安装 [[https://github.com/fatih/gomodifytags][gomodifytags]]。

#+begin_src sh
  go install github.com/fatih/gomodifytags@latest
#+end_src

*** Python

https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/

#+begin_src sh
  python3 -m pip install 'python-lsp-server[all]'
#+end_src

注意：Ubuntu 下不使用 =sudo= 会默认安装至 =~/.local/bin= 下，所以需要将路径添加到环境变量中。

lint 使用 [[https://flake8.pycqa.org/en/latest/][flake8]]，安装：

#+begin_src sh
  python3 -m pip install flake8
#+end_src

配置文件：https://github.com/zhangjie2012/dotfiles/blob/master/_flake8

*** Web

/适用于 React 开发。/

使用安装 ESLint =npm install -g eslint= 。flycheck 配置 ESLint 经常出现各种奇奇怪怪的问题，从来没有一次性成功过，汇总的自查方法：

1. 全局安装 ESLint，我不使用项目中单独的配置
2. =(setq flycheck-javascript-eslint-executable "eslint")= 指定 eslint 路径
3. =flycheck-select-checker= 指定 ESLint
4. =flycheck-verify-setup= 查看二进制路径和配置文件是否生效
   + ESLint 全局配置文件在用户目录下，具体可以查看 ESLint 的文档，ESLint 一直更新可能会有变化
   + 我的配置在 https://github.com/zhangjie2012/dotfiles/blob/master/_eslintrc.json =ln -s dotfiles/_eslintrc.json .eslintrc.json= 添加软连接
5. 以上 Emacs 都没问题，但是检测不符合预期，要检查下用的是哪里的配置文件，以及配置文件是否有问题
   + =eslint --print-config file.js= 查看使用的配置文件是什么
   + =eslint file.js= 查看错误提示与 Emacs 是否相同
   + 看 eslint 报错，缺什么 *全局* 安装

核心思路是，先保证 eslint 本身运行没问题，再看 Emacs flycheck 配置是否正常。

* 目录结构

core 目录下：

- =init-base= 基础设置
- =init-ui= 主题、modeline、字体等
- =init-modern= 更加现代化：项目管理、多光标操作等
- =init-enhance= 对 Emacs 已经具备的能力进行增强
- =init-lang= 让 Emacs 变成一个 IDE，选型：
  + =eglot= Language Server Protocol
  + =corfu-mode= 自动补全框架（用来替换 company-mode）
  + =flycheck= 语法检测
- =init-config= yaml, protobuf, nginx, thrift 等轻量化语言配置
- =init-document= 标记语言设置，markdown + orgmode
- =init-feed= rss 订阅管理

* 常用快捷键（cheat sheet）

** leader key 规范

尽量使用模块快捷键，自定义快捷键每周基于 =keyfreq= 不断优化。

|--------------+-------------|
| 级别         | 前缀        |
|--------------+-------------|
| 1L           | =C= =M=     |
| 2L           | =C-c= =M-s= |
| 3L           | =<f9>=      |
| org 专用     | =<f9> t=    |
| lsp 专用     | =<f9> s=    |
| project 专用 | =<f8>=      |
| hydra 专用   | =<f9>=      |
| 4L           | =<f2>=      |
|--------------+-------------|

说明：

- hydra 如果绑定 use-package 安装 package 的快捷键会让 lazy-load 失效，所以需要权衡一下加载时间和使用效率

** 文本

|-----------------+--------------------------------------------+--------|
| 快捷键          | 说明                                       | 频率   |
|-----------------+--------------------------------------------+--------|
| =<f9> i=        | 插入当前日期时间如 =2023-02-05 11:20:01=   |        |
| =C-+=           | 增大字体                                   |        |
| =C--=           | 减小字体                                   |        |
| =C-.=           | Do What I Mean =embark-act=                | *high* |
| =C-s=           | 当前文件搜索                               | *high* |
| =M--=           | 当前单词全部高亮                           | *high* |
| =M-i=           | 跳转到某单词首部                           | *high* |
| =M-j=           | 跳转到某行                                 | *high* |
| =M-m=           | 扩展当前文本区域                           | *high* |
| =M-n/p=         | 相同单词之前切换                           | *high* |
| =M-s ;=         | 多光标操作 =C-M-n/p= 选中下/上一个         | middle |
| =M-s P=         | 选中当前所在括号范围内的文本（不包含括号） | middle |
| =M-s [=         | 在项目中使用 rg 搜索                       | *high* |
| =M-s ]=         | rg（手动选择目录不判定 project root）      | middle |
| =M-s c=         | 跳转到某个字符                             |        |
| =M-s f=         | 选中函数                                   | middle |
| =M-s k=         | 拷贝某行到当前                             | middle |
| =M-s m=         | 选中注释                                   |        |
| =M-s p=         | 选中当前所在括号范围内的文本（包含括号）   | middle |
| =M-s s=         | 选中当前单词                               | *high* |
| =M-y=           | 剪贴板                                     | *high* |
| =S-<backspace>= | 删除整行文本                               | *high* |
|-----------------+--------------------------------------------+--------|

** 窗口

|--------------+--------------+--------|
| 快捷键       | 说明         | 频率   |
|--------------+--------------+--------|
| =M-o=        | 切换 frame   | *high* |
| =<f9> 1=     | 删除当前窗口 | *high* |
| =<f9> 2=     | 水平切分窗口 | *high* |
| =<f9> 3=     | 垂直切分窗口 | *high* |
| =<f10>=      | 全屏         | *high* |
| =<f9> <SPC>= | 透明         |        |
|--------------+--------------+--------|

** 目录

|----------+--------------+--------|
| 快捷键   | 说明         | 频率   |
|----------+--------------+--------|
| =<f9> d= | =dired-jump= | *high* |
|----------+--------------+--------|

=dired=

- =j/k= 下一行/上一行
- =h/l= 上一个/下一个文件夹
- =(= 打开/关闭详情
- =m= mark
- =t= 反选
- =U= 全部取消选中
- =% m= 搜索
- =C= copy
- =R= Remove
- =d= 标记为删除 =x= 执行
- =D= 直接删除

** 项目管理（project.el）

=<f8>= 绑定为 =project.el= 前缀。使用说明见 https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects。

** Coding

|-------------+-------------------------------------------------+--------|
| 快捷键      | 说明                                            | 频率   |
|-------------+-------------------------------------------------+--------|
| =M-.=       | 跳转到定义                                      | *high* |
| =M-,=       | 从定义返回                                      | *high* |
| =M-?=       | 查找当前所有引用                                | *high* |
| =C-M-j=     | 变量命名风格转换                                |        |
| =<f9> s s=  | 重启 eglot                                      | middle |
| =<f9> s d=  | eldoc                                           |        |
| =<f9> s i=  | eglot-find-implementation                       | middle |
| =<f9> s j=  | consult-eglot-symbols，比直接在项目中搜索中好用 | middle |
| =<f9> <f9>= | 手动执行语法检测                                |        |
|-------------+-------------------------------------------------+--------|

** Git

|----------+--------------------------------+--------|
| 快捷键   | 说明                           | 频率   |
| =M-s ,=  | magit，[[https://magit.vc/manual/magit-refcard.pdf][Magit Reference Card]]    | *high* |
| =<f9> g= | git-gitter++，显示当前文件改动 | middle |
|----------+--------------------------------+--------|

** Org

自定义快捷键：

|-------------+-------------------------------------+--------|
| 快捷键      | 说明                                | 频率   |
|-------------+-------------------------------------+--------|
| =<f9> t a=  | =org-agenda=                        | *high* |
| =<f9> t c=  | =org-capture=                       | middle |
| =<f9> t l=  | =org-toggle-link-display=           |        |
| =<f9> t f=  | =org-footnote-new=                  |        |
| =<f9> t i=  | =org-toggle-inline-images=          |        |
|-------------+-------------------------------------+--------|

默认所有快捷键 [[https://orgmode.org/worg/orgcard.html][Org-Mode Reference Card]]。

** RSS feed

|----------+-------------------+--------|
| 快捷键   | 说明              | 频率   |
|----------+-------------------+--------|
| =<f9> q= | 查看 rss 订阅更新 | *high* |
|----------+-------------------+--------|

* packages

** 当前使用的

Emacs 有很多的 [[http://melpa.org][插件]]，[[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]] 是按照分类整理的。下面列一下我正在使用的插件以及一些说明：

|--------------------+--------------------------------------+----------------------------------------------------------------------|
| 插件名称           | 插件介绍                             | 备注                                                                 |
|--------------------+--------------------------------------+----------------------------------------------------------------------|
| [[https://github.com/abo-abo/ace-window][ace-window]]         | 多窗口切换                           | 以前一直用 [[https://github.com/deb0ch/emacs-winum][emacs-winum]]                                               |
| [[https://github.com/abo-abo/avy][avy]]                | 光标快速定位（按照字符、单词、行等） | 以前用的是 [[https://github.com/winterTTr/ace-jump-mode][ace-jump]]                                                  |
| [[https://github.com/minad/cape][cape.el]] + [[https://github.com/minad/corfu][corfu]]    | 补全框架                             | 替换 Company，cape 实现了各种 =completion-at-point-functions=        |
| [[https://github.com/tumashu/cnfonts][cnfonts]]            | GUI 中英文等宽排版                   | Fira code + [[https://github.com/lxgw/LxgwWenKai][霞鹜文楷]]                                                 |
| [[https://github.com/minad/consult][consult]]            | 通用完成框架                         | 替换 ivy                                                             |
| [[https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el][dired-subtree]]      | 增强下 dired                         |                                                                      |
| [[https://github.com/seagle0128/doom-modeline][doom-modeline]]      | modeline 看起来漂亮一些，简洁        |                                                                      |
| [[https://github.com/joaotavora/eglot][eglot]]              | [[https://langserver.org][LSP]] 的 Emacs 客户端                  | 以前用 lsp-mode                                                      |
| [[https://github.com/skeeto/elfeed][elfeed]]             | Web Feed Reader                      |                                                                      |
| [[https://github.com/oantolin/embark][embark]]             | 难以描述，但真的牛逼                 |                                                                      |
| [[https://github.com/magnars/expand-region.el][expand-region]]      | 快速选中文本                         | 比如我常用 =M-s s= 选中一个单词，用 =M-s p= 选中括号内内容，然后复制 |
| [[https://www.flycheck.org/en/latest/][flycheck]]           | 强大的语法检查框架                   | 需要编程语言的 lint 工具配合，比如 eslint、golint。编码必备。        |
| [[https://github.com/nonsequitur/git-gutter-plus][git-gutter+]]        | 提示当前 buffer 改动部分             | 用 ~+~ 和 ~=~ 等显示出来                                             |
| [[https://github.com/magit/magit][magit]]              | git                                  |                                                                      |
| [[https://github.com/minad/marginalia][marginalia]]         | 备注                                 | 类似 ivy-rich                                                        |
| [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]   | 多鼠标操作                           | [[http://emacsrocks.com/e13.html][Emacs Rocks! Episode 13: multiple-cursors]]                            |
| [[https://github.com/oantolin/orderless][orderless]]          | 排序                                 |                                                                      |
| [[https://orgmode.org][org-mode]]           | 最牛逼的插件，没有之一               |                                                                      |
| [[https://github.com/bbatsov/projectile][projectile]]         | 项目管理框架                         | 可以与 ivy 一起使用，[[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]                              |
| [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] | 彩虹括号                             | 相同层级的括号相同颜色                                               |
| [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]          | JSX mode                             | 比 web-mode 好用很多，而且更新的快                                   |
| [[https://github.com/jwiegley/use-package][use-package]]        | 包配置隔离                           | 可设置启动时机（延迟加载），加速 Emacs 启动                          |
| [[https://github.com/minad/vertico][vetico]]             | 垂直交互                             |                                                                      |
| [[https://github.com/justbur/emacs-which-key][which-key]]          | 快捷键绑定提示                       |                                                                      |
| [[https://github.com/wolray/symbol-overlay][symbol-overlay]]     | 符号高亮                             | 替换 highlight-symbol                                                |
| [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]      | icons                                | =doom-mode-line 4.0= 之后只支持 nerd-icons                           |
|--------------------+--------------------------------------+----------------------------------------------------------------------|

*Vertico & Consult & marginalia & orderless 通常是一起使用的。*

** 以前用过的

一些尝试过，但是不再使用的 package：

- [[https://github.com/auto-complete/auto-complete][auto-complete]] 自动完成插件，后来用 company 替换了
- [[https://github.com/Malabarba/beacon][beacon]] 光标提醒，帮你找得到光标，感觉不怎么实用
- [[https://github.com/technomancy/better-defaults][better-defaults]] 几行代码就可以达到相同的效果
- [[https://github.com/company-mode/company-mode][company-mode]] 模块化补全框架（支持各种语言），用了几年 auto-complete，现在用 corfu 替换
- [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] 启动会显示最近使用过的文件，项目，标签等 *华而不实*
- [[https://github.com/emacsmirror/diminish][diminish]] 减少一些 mode 在 modeline 上的显示，doom-modeline 显示已经很精简了
- [[https://github.com/emacs-evil/evil][evil]] The extensible vi layer for Emacs. 从 Vim 转到 Emacs 的用户可以试一下，我的 Vim 太渣了
- [[https://github.com/emacs-helm/helm][helm]] 一个补全框架，用了四五年，后来用 ivy 替换掉了
- [[https://github.com/nschum/highlight-symbol.el][highlight-symbol]] 高亮当前单词，挺久没人维护了，用 symbol-overlay 可以完全代替
- [[https://github.com/abo-abo/hydra][hydra]] 快捷键编排，尝试了一段时间，基本上用不到。常用的快捷键，我已经编排的很合理了
- [[https://github.com/abo-abo/swiper][ivy]] 通用完成前端，用了几年 [[https://github.com/emacs-helm/helm][helm]]，现在换成了 consult
- [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] 用了几年，最后用 eglot 替换
- [[https://github.com/skuro/plantuml-mode][plantuml-mode]] [[https://plantuml.com/][PlantUML]] 的 Emacs mode，不实用
- [[https://github.com/milkypostman/powerline][powerline]] 用了一段时间，后来用 doom-modeline 替换掉了
- [[https://github.com/joaotavora/yasnippet][yasnippet]] 代码片段，以前写 C++ 的时候常用，现在不咋用了

* FAQ

** projectile 配置样例

<2023-05-13 Sat> 从 =projectile= 切换到了 =project.el= 留一份老的配置备忘：

#+begin_src elisp
  (use-package projectile
    :ensure t
    :bind (:map projectile-mode-map
                ("<f8>" . projectile-command-map)
                ("C-c p" . projectile-command-map)
                :map projectile-command-map
                ("F" . projectile-find-file-other-window)
                ("w" . projectile-find-file-in-known-projects)
                ("D" . projectile-dired-other-window)
                ("k" . projectile-kill-buffers)
                ("v" . projectile-vc)
                ("b" . projectile-switch-to-buffer))
    :config
    ;; 打开项目缓存, 否则大的项目每次构建会比较慢
    ;; 你可以通过下面两个名称来清除缓存
    ;; - projectile-purge-file-from-cache
    ;; - projectile-purge-dir-from-cache
    (setq projectile-enable-caching t)
    ;; projectile 有三种构建索引的方式: native, hybird, alien
    ;;   native 使用 Emacs lisp 实现, hybird/alien 使用外部命令类似 find, git 来实现
    ;;   alien 优化了 hybird 的性能: 它不会对外部命令返回的结果做任何处理和排序, 以获得最好的性能
    ;;   使用外部命令的话, 类似 .gitignore 会自动生效
    ;; 注意: alien 会忽略 .projectile 文件
    (setq projectile-indexing-method 'alien)
    ;; 在每个目录下都可用(即使没有项目文件)
    (setq projectile-require-project-root 'prompt)
    ;; 对结果进行排序(active buffer + recently opened)
    (setq projectile-sort-order 'recentf-active)

    ;; fix windows system "projectile-find-file" throw
    ;; 'tr' is not recognized as an internal or external command ...
    ;; via: https://github.com/bbatsov/projectile/issues/1302
    (setq projectile-git-submodule-command nil)
    (defun project-find-go-module (dir)
      (when-let ((root (locate-dominating-file dir "go.mod")))
        (cons 'go-module root)))

    (cl-defmethod project-root ((project (head go-module)))
      (cdr project))

    :init
    (projectile-mode +1))
#+end_src

** Emacs 启动速度太慢怎么办？

~M-x emacs-init-time~ 可以查看 Emacs 启动耗费时间。

多一个插件都会增加启动成本，不信你 ~emacs -Q~ 试试，所以要尽可能的减少插件。你可以使用 [[https://github.com/dacap/keyfreq][keyfreq]] 来查看你常用的快捷键有哪些。
筛选出不常用的插件给干掉，这是解决启动速度慢的根本办法。

如何定位插件耗时？

- 使用 profiler：https://punchagan.muse-amuse.in/blog/how-i-learnt-to-use-emacs-profiler/
- 使用 esup：https://github.com/jschaf/esup
- 使用 https://github.com/purcell/emacs.d/blob/master/lisp/init-benchmarking.el

定位之后如何优化？

elisp 比较熟的有自己的办法优化，当然我不熟。我的解决办法是：

使用 [[https://github.com/jwiegley/use-package][use-package]] ，use-package 并不是包管理工具，只是一个宏，用来配置和加载包。你可以通过配置（合理的使用 init、config、hook、
bind 等）实现延迟加载，提高打开的速度。

** Org =_= =^= 不被转义成下标和上标？

可以在 =+OPTIONS= 中设置 =^:nil= 来禁掉它。

- https://emacs.stackexchange.com/questions/10549/org-mode-how-to-export-underscore-as-underscore-instead-of-highlight-in-html

** Org 9.2 后继续使用 =<s [Tab]= 快捷插入？

orgmode 9.2 之后不再直接支持 =<s [Tab]= 的快捷方式插入代码块，而提供了统一的 =org-insert-structure-template= 函数，
快捷键为 =C-c C-,= 。如果想要提供以前的简洁方式，需要引入 =org-tempo= ，比如 =(require 'org-tempo)= 我使用的是
=(use-package org-tempo)= 。具体见：

- [[https://emacs.stackexchange.com/questions/46988/why-do-easy-templates-e-g-s-tab-in-org-9-2-not-work][Why do easy templates, .e.g, “< s TAB” in org 9.2 not work?]]
- [[https://orgmode.org/manual/Structure-Templates.html][org-mode 16.2 Structure Templates]]

** Org TODO 如何区分优先级？

1. 任务可以分优先级 =[#A], [#B], [#C]= 三种。使用 =<shift> + <up/down>= 进行切换
2. =org-sort-entris= 对任务进行排序（很有用），选择按照权重 =[p]riority= 排序

** Org 控制标题展开？

打开文件后，控制几级标题展示 =#STARTUP= 选项：

#+begin_src
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: show2levels
#+STARTUP: show3levels
#+STARTUP: show4levels
#+STARTUP: show5levels
#+STARTUP: showeverything
#+end_src

全局在 org 配置中打开 =org-startup-fold= [fn:1]。

** Org 文档如何展示目录？

1. 新建 =Table Of Content= 以及标题，后面加上 =:TOC:= 注解，保存自动生成
2. 控制显示多级标题 =TOC_n= ，默认为 =TOC_2= ，即显示到两级标题

** tab 和空格转换？[fn:2]

- =tabify= 空格转 tab
- =untabify= tab 转空格

** 为什么选择 LSP？

#+begin_quote
语言的开发环境配置一直很费时间，我记得以前刚配置 C/C++ 的开发环境时，折腾了一个月左右时间才找到一个相对比较
满意的开发环境（折腾完之后使用起来可真爽啊）： ~xcscope + etags + c++-mode~ 。

写 Python 的时候也折腾了长时间的缩进问题。 Go 就更不用说了···，Go 工具链很完整，但由于 Go 的版本升级很快，工具链根本跟不上，
+gocode+ 已经迁移了三次地址了。

后来看到了 [[https://langserver.org/][LSP（Language Server Protocol）]] 项目，感觉这个项目才是终极解法：插件化，C/S 模式。
目前已经默认支持 Python 和 Go 了，虽然还是有许许多多的 Bug，但比起 2018 年我试的时候已经成熟太多了。有社区的驱动，发展很快。
#+end_quote

1. =lsp-workspace-folders-remove= 可以移出之前添加的 workspace，但是如果遇到大的目录变更，一个一个的移出很慢。
   目前似乎没有提供一次性 remove all 的方法。一个解决办法是删除 lsp 的存储文件（lsp 提供了 =lsp-session-file= 变量来定义文件路径，
   默认在 =.emacs.d/.lsp-session-*= 路径下，如果没找到也可以在 lsp 源代码中搜索 lsp-session-file）。
2. +当前 LSP 还不太稳定+ ，遇到各种问题就可以重启是最有效的办法： =lsp-workspace-restart=

lsp-mode 的功能比较多，官方提供了 [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][开启/关闭 lsp-mode 特性介绍]]，否则真的抓瞎。

<2023-02-10 Fri> 由 lsp-mode 换到了 eglot。

** 项目管理？

使用 [[https://github.com/bbatsov/projectile][projectile]] 管理项目，非常方便。svn/git 项目会认为是一个 projectile，而且 ignore 的文件和目录也会自动过滤。
你也可以手动添加 =.projectile= 标识。

已经切换到内置的 =project.el= 。

** 写 Go 代码时如何禁用注释中自动补全？

=company= 只是个补全框架，实现依赖于底层语言的补全工具（lsp）。

之前给 [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] 提过 issue：https://github.com/emacs-lsp/lsp-mode/issues/2215 ，后来也没有提供直接的解决方案。

事实上，[[https://github.com/emacs-lsp/lsp-mode/blob/master/clients/lsp-go.el#L327][lsp-go]] 中有控制，但没有暴露出去。我简单粗暴的把 lsp-go.el 中的 =completion-in-comments= 设置为了 =nil= ，
然后删掉 =lsp-go.elc= 文件。

** 英文 Ubuntu 下输入法无法切换中文？

核心解决思路是加上（据说是 fctix 的 bug） =env LC_CTYPE=zh_CN.UTF-8= 环境变量。解决办法：

1. GUI 修改 =/usr/share/application/emacs.desktop= 中的启动命令 ~Exec=env LC_CTYPE=zh_CN.UTF-8 /usr/bin/emacs %F~
2. TUI 就简单了，直接在 =.bashrc= 加个 =alias=

具体可以见这个帖子：https://emacs-china.org/t/topic/974/20 ，正如 scutdk 所说，修改系统全局的 locale 可能带来其他问题。

* 其他资料

有点乱，参差不齐：

- 开箱即用的配置：
  + [[https://github.com/purcell/emacs.d][purcell/emacs.d]]：久负盛名
  + [[https://github.com/redguardtoo/emacs.d][redguardtoo/emacs.d]]
  + [[https://github.com/hlissner/doom-emacs][hlissner/doom-emacs]]
  + [[https://protesilaos.com/dotemacs/][Emacs initialisation file (dotemacs)]]: wiki + 配置
  + [[https://github.com/SystemCrafters/crafted-emacs][crafted-emacs]]：System Crafters 的配置，他在 [[https://www.youtube.com/c/SystemCrafters][YouTube]] 上有很多视频
  + [[http://www.emacs-bootstrap.com/][emacs-bootstrap]]: 动态生成 Emacs 配置
  + [[https://github.com/lujun9972/emacs-document][文章集合]]
- 博客 & Github
  + [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]]
  + [[https://planet.emacslife.com/][Planet Emacslife]]：Emacs 百科全书，大杂烩
  + [[https://emacsthemes.com/][Emacs Themes]]：主题集合
  + [[http://oremacs.com/][oremacs]]
  + [[https://protesilaos.com/dotemacs/][dotemacs]] 完善的 Emacs 配置 Wiki
  + [[https://manateelazycat.github.io/emacs/2022/11/07/how-i-use-emacs.html][我平常是怎么使用 Emacs 的？]]
- GTD 相关文章：
  - [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Orgmode for GTD]]
  - [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][How I use Emacs and Org-mode to implement GTD]]
  - [[https://devhints.io/org-mode][org-mode cheatsheet]]
- 视频：
  - [[https://cestlaz.github.io/stories/emacs/][Using Emacs Series]]：cestlaz 的使用 Emacs 系列，偏向于插件介绍
  - [[http://emacsrocks.com/][emacsrocks]] 很多短视频，偏向于插件介绍
  - [[https://www-users.cs.umn.edu/~kauffman/tooltime/][ToolTime]] 前两节是讲 Emacs 的，理论+实践，有视频还有配套的 PPT，一般的资料都是讲什么用，而这个课程讲了为什么是这样，由浅入深；非常推荐。
  - [[https://www.youtube.com/watch?v=Vx0bSKF4y78&t=225s][关于 Emacs 的补全]]
- 我自己写的：
  - <2019-06-17 Mon> [[https://www.zhangjiee.com/blog/2019/emacs-is-fun-1.html][Emacs 心路历程（上）]]、[[https://www.zhangjiee.com/blog/2019/emacs-is-fun-2.html][Emacs 心路历程（下）]] 感悟
  - <2014-12-01 Mon> [[https://www.zhangjiee.com/blog/2014/emacs-simple-tutorial.html][Emacs 简易教程]] 内容比较旧了，已经不再维护
  - [[file:../../../blog/2019/emacs-slide.org][Emacs 基于 org-reveal 做幻灯片]]
  - [[https://www.zhangjiee.com/blog/2019/emacs-slide.html][使用 org-mode 搭建网站]]

* Footnotes

[fn:5] https://emacs-china.org/t/homebrew-emacs-plus-28/19106

[fn:4] https://github.com/joaotavora/eglot#emacscore

[fn:3] https://github.com/jwiegley/use-package

[fn:2] https://www.masteringemacs.org/article/converting-tabs-whitespace

[fn:1] https://stackoverflow.com/questions/52722096/build-emacs-and-gnutls-not-found
