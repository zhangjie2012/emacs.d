#+TITLE: Emacs config

* Table Of Content                                                      :TOC:
- [[#安装][安装]]
- [[#适配][适配]]
- [[#背景][背景]]
- [[#目标][目标]]
- [[#package-选型][Package 选型]]
- [[#配置core][配置：core]]
- [[#core-cheat-sheet][core cheat sheet]]
- [[#文档][文档]]
- [[#faq][FAQ]]
  - [[#org-文档如何展示目录][Org 文档如何展示目录？]]
  - [[#写-go-代码时如何禁用注释中自动补全][写 Go 代码时如何禁用注释中自动补全？]]

* 安装

#+begin_src
git clone https://github.com/zhangjie2012/emacs.d.git ~/.emacs.d
#+end_src

直接打开 Emacs 自动安装依赖包。package 源在国内无法访问，需要使用代理 =http_proxy=http://127.0.0.1:7890 emacs= 。

或者使用清华的源替换掉 =package-archives= ：

#+begin_src elisp
  (setq package-archives
        '(
          ("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/stable-melpa/")
          ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
          )
        )
#+end_src

如果遇到安装问题执行 =M-x package-refresh-content= 重启 Emacs。

二进制依赖：

- [[https://github.com/BurntSushi/ripgrep][ripgrep]] 搜索使用
- 编码：
  - 语法检测 flycheck [[https://www.flycheck.org/en/latest/languages.html#flycheck-languages][Supported languages]]
  - 统一使用 lsp，需要安装对应语言的 [[https://emacs-lsp.github.io/lsp-mode/page/languages/][Languages]]

* 适配

- Emacs 版本：27.x（25.x,26.x 没测试过，28.x 确定不行）
- 系统：
  + WSL2 TUI *OK*
  + Windows GUI *OK*
  + Linux/MacOS TUI+GUI *没测过，大概率可行*

GUI 通过 [[https://github.com/tumashu/cnfonts][cnfonts]] 实现中英文等宽对齐，当前配置使用字体是 [[https://github.com/tonsky/FiraCode][Fira Code]] + [[https://github.com/lxgw/LxgwWenKai][霞鹜文楷]]。

* 背景

基于老的配置文件：https://gitlab.com/JerryZhang2012/emacs.d

10 年+ Emacs 用户，作为唯一编辑器，做过 C++、Python、Web（Javascript/React）、Go 等开发。

基于之前的各种耗费时间的经历，决定最后折腾一次，再也不在 Emacs 耗费太多精力。

* 目标

贴近原生的最小化 Emacs 配置，实用、稳定、不花里胡哨、少折腾为核心思路。

* Package 选型

- 少用 package
- 使用 =use-package= 全局管理插件
- 尽可能使用 package 的 stable 版本
- 使用大而全的 package，不用一堆的小而美

* 配置：core

- =init-base= 原生 emacs 的一些基础配置，包含编码，工具栏展示，自动保存等等
- =init-ui= 主题、mode-line 相关
- =init-modernization= 去掉原生的一套，让 Emacs 更加现代化
- =init-ide-base= 让 Emacs 变成一个 IDE，选型：
  + =projectile= 工程管理
  + =company-mode= 自动补全
  + =lsp= Language Server Protocol
  + =flycheck= 语法检测
- =init-ide-go= Go
- =init-ide-web= Web Dev
- =init-ide-python= Python
- =init-config= 常见配置文件
- =init-document= 文档 mode，markdown + orgmode

* core cheat sheet

- =C-s= 本文件搜索
- =<F5>= 切换 dark/light 主题
- =<f8>= project 操作前缀
- =<f9> 1= 关闭其他窗口（只保留当前一个）
- =<f9> 2= 水平切分窗口
- =<f9> 3= 垂直切分窗口
- =<f9> c= 打开 eshell
- =<f9> d= 打开 dired，目录操作
- =<f9> <f9>= 对当前 buffer 执行语法检测（flycheck buffer）
- =<f9> g= 打开/关闭 git gutter
- =<f9> l= 列数当前 buffer 的所有语法错误
- =<f9> s h= lsp-toggle-symbol-highlight
- =<f9> s s= 重启 lsp
- =<f9> t f= org-footnote-new
- =<f9> t l= org-toggle-link-display
- =<f9> w= save buffer，取代 =C-x s=
- =M-?= find references
- =M--= =M-n= =M-p= 当前单词高亮，上下跳转
- =M-.= =M-,= 跳转到定义、返回
- =M-m= 选中扩展
- =M-o= 窗口切换
- =M-s i= 跳转到单词
- =M-s j= 跳转到行
- =M-s k= 拷贝指定行
- =M-s l= 显示/隐藏行号
- =M-s [= =M-s ]= 在项目中搜索，前者使用 =rg= ，后者使用 =git-grep=
- =M-s ;= multiple cursors
- =M-s r= 显示/隐藏相对行号
- =M-s s= 选中当前单词
- =M-*= 匹配括号起始、结束跳转

* 文档

https://www.zhangjiee.com/topic/emacs/index.html

* FAQ

** Org 文档如何展示目录？

一级标题后加上 =:TOC:= 注解，保存自动生成。

** 写 Go 代码时如何禁用注释中自动补全？

=company= 只是个补全框架，实现依赖于底层语言的补全工具（lsp）。

之前给 [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] 提过 issue：https://github.com/emacs-lsp/lsp-mode/issues/2215 ，后来也没有提供直接的解决方案。

事实上，[[https://github.com/emacs-lsp/lsp-mode/blob/master/clients/lsp-go.el#L327][lsp-go]] 中有控制，但没有暴露出去。我简单粗暴的把 lsp-go.el 中的 =completion-in-comments= 设置为了 =nil= ，
然后删掉 =lsp-go.elc= 文件。
